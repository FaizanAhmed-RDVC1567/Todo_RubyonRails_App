name: Rails project CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2025]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis (Linux)
        if: runner.os == 'Linux'
        run: bin/brakeman --no-pager
        
        # For windows, explicitly mentioning 'ruby' is necessary
      - name: Scan for common Rails security vulnerabilities using static analysis (Windows)
        if: runner.os == 'Windows'
        run: ruby bin/brakeman --no-pager

  scan_js:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2025]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies (Linux)
        if: runner.os == 'Linux'
        run: bin/importmap audit

      # Again as before, mentioning 'ruby' explicitly is important on Windows.
      - name: Scan for security vulnerabilities in JavaScript dependencies (Windows)
        if: runner.os == 'Windows'
        run: ruby bin/importmap audit

  lint:
    runs-on: windows-2025
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style (Linux)
        if: runner.os == 'Linux'
        run: bin/rubocop -f github
      
      - name: Lint code for consistent style (Windows)
        if: runner.os == 'Windows'
        run: ruby bin/rubocop -f github

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2025]

    # services:
    #  redis:
    #    image: redis
    #    ports:
    #      - 6379:6379
    #    options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libyaml-dev pkg-config google-chrome-stable
        
      - name: Install packages (Windows)
        if: runner.os == 'Windows'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          choco feature enable -n allowGlobalConfirmation
          choco install msys2 googlechrome -y
          & 'C:\tools\msys2\usr\bin\bash.exe' -lc 'pacman -Syu --noconfirm base-devel git pkg-config libyaml'
      # Comments for the above steps:
      # 1) Install Chocolatey if not present
      # 2) Enable auto-confirmation
      # 3) install MSYS2 and Chrome
      # 4) bootstrap MSYS2: update core & install Unix tools

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        env:
          RAILS_ENV: test
          # REDIS_URL: redis://localhost:6379/0
        run: bin/rails db:test:prepare test test:system

      # Same with this step, need to explicitly mention ruby rather than relying on Linux's shebang syntax which will not work.
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        env:
          RAILS_ENV: test
          # REDIS_URL: redis://localhost:6379/0
        run: ruby bin/rails db:test:prepare test test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
